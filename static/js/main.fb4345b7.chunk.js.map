{"version":3,"sources":["components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Popup","className","this","props","text","onClick","closePopup","React","Component","App","state","showPopup","message","txt","setState","console","log","togglePopup","bind","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6RAiBeA,G,6LAZX,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,eACb,4BAAKC,KAAKC,MAAMC,MAClB,4BAAQC,QAASH,KAAKC,MAAMG,YAA5B,kB,GANYC,IAAMC,YC8CXC,E,YA3CX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,WAAW,EACXC,QAAS,IAJE,E,yEAQPC,GACRX,KAAKY,SAAS,CACVH,WAAYT,KAAKQ,MAAMC,UACvBC,QAASC,IAGbE,QAAQC,IAAId,KAAKQ,S,+BAIjB,OACI,yBAAKT,UAAU,OASX,2EACA,4BAAQI,QAASH,KAAKe,YAAY,OAAOC,KAAKhB,OAA9C,0BACCA,KAAKQ,MAAMC,UACR,kBAAC,EAAD,CAEIP,KAAMF,KAAKQ,MAAME,QACjBN,WAAYJ,KAAKe,YAAY,OAAOC,KAAKhB,QAE3C,U,GAtCJK,IAAMC,WCQlBW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxB,QACfkB,UAAUC,cAAcQ,YAI1BtB,QAAQC,IACN,iHAKEW,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBjB,QAAQC,IAAI,sCAGRW,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACL1B,QAAQ0B,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,UAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,UAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLzB,QAAQC,IACN,oEAvFA6C,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjChB,QAAQC,IACN,iHAMJS,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.fb4345b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nclass Popup extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='popup'>\r\n        <div className='popup_inner'>\r\n          <h1>{this.props.text}</h1>\r\n        <button onClick={this.props.closePopup}>close me</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Popup;","import React from 'react';\nimport './App.css';\nimport Popup from './components/Popup'\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPopup: false,\n            message: ''\n        };\n    }\n\n    togglePopup(txt) {\n        this.setState({\n            showPopup: !this.state.showPopup,\n            message: txt\n        });\n\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {/* <a-scene arjs='sourceType: webcam; debugUIEnabled: false'>\n                    <a-anchor hit-testing-enabled=\"true\">\n                        <a-entity position='0 0 0' scale='0.05 0.05 0.05' rotation='200 0 0' obj-model='obj: url(models/dog.obj); mtl: url(models/dog.mtl)'></a-entity>\n                        <a-box position='0 0 0.5' material='opacity: 0.7; color: yellow;'></a-box>\n                    </a-anchor>\n                    <a-camera-static preset=\"hiro\" />\n                </a-scene> */}\n\n                <h1> Simple Popup Example In React Application </h1>\n                <button onClick={this.togglePopup('323').bind(this)}> Click To Launch Popup</button>\n                {this.state.showPopup ?\n                    <Popup\n                        // {...console.log(this.state)}\n                        text={this.state.message}\n                        closePopup={this.togglePopup('123').bind(this)}\n                    />\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}