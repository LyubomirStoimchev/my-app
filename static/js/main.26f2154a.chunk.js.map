{"version":3,"sources":["components/ArButton.js","App.js","serviceWorker.js","index.js"],"names":["ArButton","props","state","position","href","assetId","assetSrc","crossorigin","id","this","src","class","title","image","rotation","scale","geometry","material","link","radius","segments-height","attribute","begin","loop","end","dur","fill","to","ease","React","Component","App","embedded","arjs","inspector","keyboard-shortcuts","screenshot","vr-mode-ui","aframe-inspector-removed-embedded","data-aframe-canvas","width","height","hit-testing-enabled","obj-model","preset","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uOA8BeA,G,kBA3BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,SAAU,GACVC,KAAM,GACNC,QAAS,GACTC,SAAU,IANC,E,sEAWf,OACI,6BACI,kCACI,yBAAKC,YAAY,YAAYC,GAAIC,KAAKP,MAAMG,QAASK,IAAKD,KAAKP,MAAMI,YAGzE,4BAAQK,MAAM,YAAYP,KAAMK,KAAKP,MAAME,KAAMQ,MAAM,GAAGC,MAAM,GAAGV,SAAUM,KAAKP,MAAMC,SAAUW,SAAS,aAAaC,MAAM,cAAcC,SAAS,+BAA+BC,SAAS,0CAA0CC,KAAK,WACxO,2BAAOH,MAAM,eAAeE,SAAU,QAAUR,KAAKP,MAAMG,QAASF,SAAS,kEAAkEgB,OAAO,IAAIC,kBAAgB,KAAKN,SAAS,0BAA0BE,SAAS,IACvN,iCAAaK,UAAU,WAAWC,MAAM,aAAaC,KAAK,OAAOC,IAAI,aAAaC,IAAI,OAAOC,KAAK,YAAYC,GAAG,cAAcC,KAAK,kB,GApBrIC,IAAMC,YC0CdC,E,iLApBP,OACI,6BAEI,6BAASC,UAAQ,EAACC,KAAK,sBAAsBC,UAAU,GAAGC,qBAAmB,GAAGC,WAAW,GAAGC,aAAW,GAAGC,oCAAkC,aAC1I,4BAAQ3B,MAAM,WAAW4B,qBAAmB,OAAOC,MAAM,MAAMC,OAAO,QAEtE,8BAAUC,sBAAoB,QAC1B,8BAAUvC,SAAS,QAAQY,MAAM,iBAAiBD,SAAS,UAAU6B,YAAU,uDAC/E,2BAAOxC,SAAS,UAAUc,SAAS,kCAEvC,qCAAiB2B,OAAO,SAExB,kBAAC,EAAD,Y,GAhCFf,IAAMC,WCQlBe,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1D,QACfoD,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,UAAwB5B,OAAOC,SAAS5C,MACpDwE,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMuB,UAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCrC/BE,I","file":"static/js/main.26f2154a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ArButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: \"\",\r\n            href: \"\",\r\n            assetId: \"\",\r\n            assetSrc: \"\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <a-assets>\r\n                    <img crossorigin=\"anonymous\" id={this.state.assetId} src={this.state.assetSrc} />\r\n                </a-assets>\r\n\r\n                <a-link class=\"clickable\" href={this.state.href} title=\"\" image=\"\" position={this.state.position} rotation=\"-67.42 0 0\" scale=\"0.6 0.6 0.6\" geometry=\"primitive:circle;segments:64\" material=\"shader:portal;side:double;visible:false\" link=\"title:.\">\r\n                    <a-box scale=\"0.8 0.8 1.05\" material={\"src:#\" + this.state.assetId} position=\"-0.09854454977856898 -0.0036935886841299587 -0.2155814669584256\" radius=\"2\" segments-height=\"84\" rotation=\"-23.450000000000003 0 0\" geometry=\"\">\r\n                        <a-animation attribute=\"rotation\" begin=\"mouseenter\" loop=\"true\" end=\"mouseleave\" dur=\"2000\" fill=\"backwards\" to=\"335 360 360\" ease=\"linear\" />\r\n                    </a-box>\r\n                </a-link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArButton;","import React from 'react';\nimport './App.css';\nimport ArButton from './components/ArButton';\n\nclass App extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         showPopup: false,\n    //         message: ''\n    //     };\n    // }\n\n    // togglePopup() {\n    //     this.setState({\n    //         showPopup: !this.state.showPopup,\n    //         message: ''\n    //     });\n\n    //     // console.log(this.state);\n    // }\n\n    render() {\n        return (\n            <div>\n                {/* // <div className=\"App\"> */}\n                <a-scene embedded arjs=\"sourceType: webcam;\" inspector=\"\" keyboard-shortcuts=\"\" screenshot=\"\" vr-mode-ui=\"\" aframe-inspector-removed-embedded=\"undefined\">\n                    <canvas class=\"a-canvas\" data-aframe-canvas=\"true\" width=\"300\" height=\"150\" />\n\n                    <a-anchor hit-testing-enabled=\"true\">\n                        <a-entity position='0 0 0' scale='0.05 0.05 0.05' rotation='200 0 0' obj-model='obj: url(models/dog.obj); mtl: url(models/dog.mtl)'></a-entity>\n                        <a-box position='0 0 0.5' material='opacity: 0.7; color: yellow;'></a-box>\n                    </a-anchor>\n                    <a-camera-static preset=\"hiro\" />\n\n                    <ArButton />\n\n                </a-scene>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ArButton from './components/ArButton';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}